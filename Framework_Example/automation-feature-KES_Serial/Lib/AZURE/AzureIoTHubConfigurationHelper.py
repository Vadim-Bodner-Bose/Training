from azure.iot.hub import IoTHubConfigurationManager
from azure.iot.hub.models import Configuration, ConfigurationContent
from Config.Azure_Config import IOTHUB_CONNECTION_STR, BLOB_BUILD_PATH
from Lib.AZURE.AzureBlobHelper import AzureBlobHelper


class AzureIoTHuBHelper:

    def __init__(self, config_id, device_id):
        # Create IoTHubConfigurationManager
        self.iothub_configuration = IoTHubConfigurationManager(IOTHUB_CONNECTION_STR)
        self.config_id = config_id
        self.device_id = device_id

    def create_configuration(self):
        config = Configuration()
        config.id = self.config_id
        version = AzureBlobHelper().get_latest_version()

        ota_release_id = "properties.desired.c2dXfer_%s"% self.config_id
        uri = BLOB_BUILD_PATH + version[0]
        self.data = {
            "version":  version[1],
            "type":     "FWUPDT",
            "flags":    "MANDATORY",
            "xferId":   self.config_id,
            "package": {
                "uri":        uri,
                "check":      "3864",    # Static value for Kduo, must be generated by code for KES
                "size":       1430000  # Static value for Kduo, must be generated by code  for KES
            }
        }
        json = {ota_release_id: self.data}
        content = ConfigurationContent(
            device_content=json
        )
        config.content = content
        config.target_condition = "deviceId = '%s'" % self.device_id
        config.priority = 1000
        return config

    def remove_IoTHub_configuration(self):
        try:
            # Delete configuration
            self.iothub_configuration.delete_configuration(self.config_id)
        except Exception as ex:
            print("Unexpected error {0}".format(ex))

    def set_IoTHub_configuration(self):
        try:
            # Create configuration
            sample_configuration = self.create_configuration()
            self.iothub_configuration.create_configuration(sample_configuration)

        except Exception as ex:
            print("Unexpected error {0}".format(ex))

